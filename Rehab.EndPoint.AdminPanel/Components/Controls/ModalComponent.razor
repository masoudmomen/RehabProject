
@typeparam TModel

@if (IsVisible)
{
    <div class="modal-backdrop">
        <div class="modal-content">
            <h3>@Title</h3>
            <hr />
            <EditForm Model="Model" OnValidSubmit="HandleValidSubmit">
                @*                 <AntiforgeryToken></AntiforgeryToken>
 *@                <DataAnnotationsValidator />
                <ValidationSummary />

                @if(ChildContent != null)
                {
                    @ChildContent
                }

                <div class="modal-actions">
                    @if (isAddBtnActive)
                    {
                        <button type="submit" class="@OkButtonClass">@OkButton</button>
                    }
                    else
                    {
                        <button class="btn btn-outline-danger" disabled>@OkButton</button>
                    }
                    <button type="button" class="btn btn-secondary" @onclick="Close">@CancelButton</button>
                </div>
            </EditForm>
        </div>
    </div>
}
@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public TModel Model { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public EventCallback<TModel> OnValidSubmit { get; set; }
    [Parameter] public string OkButton { get; set; }
    [Parameter] public string CancelButton { get; set; }
    [Parameter] public string OkButtonClass { get; set; }
    private bool isAddBtnActive = true;


    public bool IsVisible { get; set; }

    public void Show()
    {
        IsVisible = true;
        InvokeAsync(StateHasChanged);
    } 
    public void Close() 
    {
        IsVisible = false;
        InvokeAsync(StateHasChanged);
    }

    public void SetIsAddBtnActive(bool value)
    {
        isAddBtnActive = value;
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleValidSubmit()
    {
        await OnValidSubmit.InvokeAsync(Model);
        Close();
    }
}
