@rendermode InteractiveServer
@using AutoMapper
@using Rehab.Application.SubstancesWeTreat
@using Rehab.EndPoint.AdminPanel.Viewmodels
@inject AutoMapper.IMapper mapper
@inject Rehab.Application.SubstancesWeTreat.ISubstancesWeTreatService SwtService
@inject IJSRuntime JS

<h5 class="text-decoration-underline mt-0 mb-2 text-start">Substances We Treats Information</h5>
<div class="row">
    <div class="col-5">
        <div class="col rounded-2" style="border:solid 1px gray;background-color:white;z-index:500;">
            <div class="bg-info rounded-top p-1 text-center text-white">Substances We Treats List</div>
            <div style="min-height:362px;max-height:362px;overflow-y:scroll;z-index:1000;background-color:white" class="">
                <input class="form-control searchBox" @bind="SearchText" @bind:event="oninput" placeholder="search.." />
                @foreach (var item in FiltersdModelList)
                {
                    <div class="rounded-1 border-1 bg-light mt-2 mx-auto p-2" style="width:95%;cursor:pointer;" @ondblclick="() =>AddSingleModel(item)">
                        <input class="form-check-input" type="checkbox" @oninput="()=>AddToSelectedModels(item)">
                        <img src="@item.Logo" class=" mx-2" width="20" height="20" />
                        <span class=" ">@item.Name</span>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-2">
        <div class="rounded-2" style="border:solid 1px gray;background-color:white;z-index:1000">
            <div class="bg-info rounded-top p-1 text-center text-white" style="max-height:33px;overflow:hidden">Operation</div>
            <div style="min-height:362px;max-height:362px;" class="d-flex align-items-center text-center">
                <div class="w-100">
                    <button type="button" @onclick="AddModel" class="btn btn-light btn-outline-success my-2" style="width:95%;">Add&gt;</button>
                    <button type="button" @onclick="RemoveModel" class="btn btn-light btn-outline-danger my-2 overflow-hidden" style="width:95%;">&lt;Remove</button>
                    <button type="button" class="btn btn-light btn-outline-info my-2 overflow-hidden" style="width:95%;">Create</button>
                </div>
            </div>
        </div>
    </div>
    <div class="col-5">
        <div class="col rounded-2" style="border:solid 1px gray;background-color:white;z-index:500">
            <div class="bg-info rounded-top p-1 text-center text-white">Selected List</div>
            <div style="min-height:362px;max-height:362px;overflow-y:scroll;z-index:1000;background-color:white;">
                @if (Facility!.Swts is not null)
                {
                    @foreach (var item in Facility.Swts)
                    {
                        <div class="rounded-1 border-1 bg-light mt-2 mx-auto p-2 d-flex align-items-center" style="width:95%;cursor:pointer;">
                            <input class="form-check-input my-auto" type="checkbox" @oninput="()=>AddToUnSelectedModels(item)">
                            <img src="@item.Logo" class=" mx-2" width="20" height="20" />
                            <span class=" ">@item.Name</span>
                            <button type="button" class="btn btn-sm ms-auto" @onclick="()=>RemoveSingleModel(item)"><i class="fa fa-times"></i></button>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public FacilityViewmodel? Facility { get; set; }
    public List<SwtViewmodel> ModelList { get; set; } = new();
    public List<SwtViewmodel> FiltersdModelList { get; set; } = new();
    public List<SwtViewmodel> ModelSelectedList { get; set; } = new();
    public List<SwtViewmodel> ModelUnSelectedList { get; set; } = new();

    private string searchText = string.Empty;

    protected override void OnInitialized()
    {
        ModelList = mapper.Map<List<SwtViewmodel>>(SwtService.GetList());
        FiltersdModelList = ModelList;
    }

    private string SearchText
    {
        get => searchText;
        set
        {
            searchText = value;
            FilterEntity();
        }
    }

    private void FilterEntity()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            FiltersdModelList = ModelList;
        }
        else
        {
            FiltersdModelList = ModelList.Where(f => f.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }


    private void AddSingleModel(SwtViewmodel model)
    {
        if (model is not null)
        {
            var isModelExist = false;
            foreach (var item in Facility!.Swts!)
            {
                if (model.Id == item.Id)
                {
                    isModelExist = true;
                    break;
                }
            }
            if (!isModelExist) 
            {
                Facility.Swts.Add(model); 
                Facility.SwtsId!.Add(model.Id); 
            }
        }
    }

    private void AddModel()
    {
        if (ModelSelectedList is not null)
        {
            foreach (var item in ModelSelectedList)
            {
                var isModelExist = false;
                foreach (var insc in Facility!.Swts!)
                {
                    if (item.Id == insc.Id)
                    {
                        isModelExist = true;
                        break;
                    }
                }
                if (!isModelExist) 
                {
                    Facility.Swts.Add(item); 
                    Facility.SwtsId!.Add(item.Id); 
                }
            }
        }
        ModelSelectedList?.Clear();
        ModelUnSelectedList?.Clear();
        JS.InvokeVoidAsync("UnCheckAllCheckBoxes");
    }

    private void AddToSelectedModels(SwtViewmodel model)
    {
        if (model is not null)
        {
            if (!ModelSelectedList.Contains(model))
                ModelSelectedList.Add(model);
            else
                ModelSelectedList.Remove(model);
        }
    }

    private void RemoveSingleModel(SwtViewmodel model)
    {
        if (model is not null && Facility!.Swts!.Contains(model))
        {
            Facility.Swts.Remove(model);
            Facility.SwtsId!.Remove(model.Id);
        }
    }
    private void AddToUnSelectedModels(SwtViewmodel model)
    {
        if (model is not null)
        {
            if (!ModelUnSelectedList.Contains(model))
                ModelUnSelectedList.Add(model);
            else
                ModelUnSelectedList.Remove(model);
        }
    }
    private void RemoveModel()
    {
        if (ModelUnSelectedList is not null)
        {
            foreach (var item in ModelUnSelectedList)
            {
                foreach (var insc in Facility!.Swts!)
                {
                    if (item.Id == insc.Id)
                    {
                        Facility.Swts.Remove(item);
                        Facility.SwtsId!.Remove(item.Id);
                        break;
                    }
                }
            }
        }
        ModelSelectedList?.Clear();
        ModelUnSelectedList?.Clear();
        JS.InvokeVoidAsync("UnCheckAllCheckBoxes");
    }
}
