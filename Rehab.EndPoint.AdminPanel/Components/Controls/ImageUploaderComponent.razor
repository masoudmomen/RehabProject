@using Cropper.Blazor.Extensions
@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Components.Forms;
@using Cropper.Blazor.Components;
@using Cropper.Blazor.Models;
@using Rehab.Application.Facilities
@using Rehab.EndPoint.AdminPanel.Viewmodels
@inject IWebHostEnvironment Env
@inject IImageUploaderService Uploader
@inject IFacilityService FacilityService

<style>
    .big-img {
        max-height: 400px;
        /* This rule is very important, please don't ignore this */
        max-width: 100%;
    }

    .img-container {
        max-height: 400px;
        width: 100%;
    }

    /* Means that the cropped image will take up 100% of the width of its containing element */
    .cropped-img-container {
        /* width: 50%; */
    }

    /* These styles are just needed for a nice button and don't related with cropper component */
    .button {
        display: inline-block;
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        text-align: center;
        text-decoration: none;
        font-size: 16px;
        cursor: pointer;
    }
</style>

@if (IsVisible)
{
    <div class="modal-backdrop modal-fullscreen" >
        <div class="container p-3" style="border:solid 5px darkgray;border-radius:5px;">
            <button type="button" class="btn-close float-end bg-white" @onclick="Close"></button><br />
            <div class="row">
                <div class="col">
                    <InputFile OnChange="OnInputFileChange" class="form-control my-2 mx-auto " accept="image/*" />
                </div>
                @if(ImageTagName == "images")
                {
                    <div class="col">
                        <InputText @bind-Value="ImageTitle" class="form-control my-2 mx-auto"   />
                    </div>
                }
            </div>
            @if (!string.IsNullOrWhiteSpace(imageSrc))
            {
                <div class="row g-2">
                    <div class="col" style="border:dotted 3px white;border-radius:5px;">
                        <div class="img-container">
                            <CropperComponent Class="big-img" Options="CropperOption" Src="@imageSrc" @ref="cropperComponent" />
                        </div>
                    </div>
                    <div class="col" style="border:solid 3px white;border-radius:5px;">
                        <img class="cropped-img-container" src="@croppedCanvasDataURL" />
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="modal-footer text-start">
                        <button class="btn btn-outline-info" @onclick="GetCroppedCanvasDataURLAsync">Get cropped image</button>
                        <button type="button" class="btn btn-primary" @onclick="ApplyImage">Save Image</button>
                    </div>
                </div>
            }
        </div>
    </div>
}


@code {
    private CropperComponent? cropperComponent = null!;
    private string croppedCanvasDataURL;
    private string? imageSrc;
    private IBrowserFile InputFile;
    public string ImageTitle { get; set; }
    [Parameter] public int FacilityId { get; set; }
    [Parameter] public SetFacilityImagesViewmodel Model { get; set; }

    [Parameter] public string ImageTagName { get; set; }

    [Parameter] public EventCallback<string> selectedImage { get; set; }
    [Parameter] public EventCallback OnCloseImageUploader { get; set; }

    [Parameter] public Options CropperOption { get; set; } = new();



    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        imageSrc = "";
        croppedCanvasDataURL = "";
        var files = e.GetMultipleFiles();
        await ConvertFileToImageSrc(files[0]);
        StateHasChanged();
    }

    private async Task ConvertFileToImageSrc(IBrowserFile file)
    {
        InputFile = file;
        // بررسی اینکه فقط تصویر انتخاب شده
        if (!file.ContentType.StartsWith("image/"))
        {
            imageSrc = null;
            return;
        }

        var buffer = new byte[file.Size];
        using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // حداکثر 10 مگابایت
        await stream.ReadAsync(buffer);

        // تبدیل به Base64
        var base64 = Convert.ToBase64String(buffer);
        imageSrc = $"data:{file.ContentType};base64,{base64}";
    }

    public async Task GetCroppedCanvasDataURLAsync()
    {
        GetCroppedCanvasOptions getCroppedCanvasOptions = new GetCroppedCanvasOptions
        {
            MaxHeight = 4096,
            MaxWidth = 4096,
            ImageSmoothingQuality = ImageSmoothingQuality.High.ToEnumString(),
        };
        croppedCanvasDataURL = await cropperComponent!.GetCroppedCanvasDataURLAsync(getCroppedCanvasOptions);
    }

    private async Task ApplyImage()
    {
        if (string.IsNullOrWhiteSpace(croppedCanvasDataURL)) croppedCanvasDataURL = imageSrc;

        // Convert DataURL to byte[]
        var base64 = croppedCanvasDataURL.Split(',')[1];
        byte[] imageBytes = Convert.FromBase64String(base64);

        if (ImageTagName == "logo")
        {
            var imageToUploadPath = await Uploader.UploadAsync(imageBytes, InputFile.Name, Env.WebRootPath, "uploads/facilities/logo");
            if (!string.IsNullOrWhiteSpace(imageToUploadPath))
                FacilityService.SetFacilityLogo(FacilityId, imageToUploadPath);
        }
        if (ImageTagName == "cover")
        {
            var imageToUploadPath = await Uploader.UploadAsync(imageBytes, InputFile.Name, Env.WebRootPath, "uploads/facilities/cover");
            if (!string.IsNullOrWhiteSpace(imageToUploadPath))
                FacilityService.SetFacilityCover(FacilityId, imageToUploadPath);
        }
        if (ImageTagName == "images")
        {
            var imageToUploadPath = await Uploader.UploadAsync(imageBytes, InputFile.Name, Env.WebRootPath, "uploads/facilities/images");
            if (!string.IsNullOrWhiteSpace(imageToUploadPath))
            {
                if(FacilityService.SetFacilityImages(FacilityId, imageToUploadPath, ImageTitle))
                {
                    Model.FacilityImages!.Add(new FacilityImagesViewmodel
                        {
                            ImageAddress = croppedCanvasDataURL,
                            Title = ImageTitle
                        });
                }
            }
            
        }


        await selectedImage.InvokeAsync(croppedCanvasDataURL);
        croppedCanvasDataURL = "";
        imageSrc = "";
        IsVisible = false;
    }






    public bool IsVisible { get; set; }

    public void Show()
    {
        croppedCanvasDataURL = "";
        IsVisible = true;
        InvokeAsync(StateHasChanged);
    }
    public void Close()
    {
        OnCloseImageUploader.InvokeAsync();
        IsVisible = false;
        InvokeAsync(StateHasChanged);
    }
}
