@using Rehab.Application.Conditions
@using Rehab.EndPoint.AdminPanel.Components.Controls
@using Rehab.EndPoint.AdminPanel.Viewmodels
@using System.Text.Json
@inject Rehab.Application.Conditions.IConditionService ConditionService
@inject AutoMapper.IMapper mapper
@rendermode InteractiveServer
@inject AlertService AlertService
@inject IWebHostEnvironment Env
@inject IImageUploaderService Uploader
@page "/conditions"

<div class="w-75 mx-auto p-4">
    <h3>Conditions</h3>
    @if (ConditionsList is not null)
    {
        <div class="row g-4">
            <div class="col-sm-12 col-xl-6 w-100">
                <div class="bg-light rounded h-100 p-4">
                    <table class="table table-responsive-lg">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Icon</th>
                                <th scope="col">Name</th>
                                <th scope="col">Description</th>
                                <th scope="col">Operation</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{ var i = 0; }
                            @foreach (var item in ConditionsList)
                            {
                                i++;
                                <tr>
                                    <th scope="row">@i</th>
                                    <td>
                                        <img src="@item.Logo" width="30" height="30" />
                                    </td>
                                    <td style="max-width:200px;max-height:50px;overflow:hidden;">@item.Name</td>
                                    <td>
                                        <p style="max-width:400px;max-height:50px;overflow-y:auto">
                                            @item.Description
                                        </p>
                                    </td>
                                    <td>
                                        <i class="fa fa-edit cursor-pointer" title="Edit Insurance" @onclick="()=>OpenEditModal(item)"></i>
                                        &ensp;&ensp;&ensp;
                                        <i class="fa fa-image cursor-pointer" title="Show Image" @onclick="()=>OpenImageModal(item)"></i>
                                        &ensp;&ensp;&ensp;
                                        <i class="fa fa-trash cursor-pointer" title="Delete Insurance" @onclick="()=>OpenDeleteModal(item)"></i>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<!-- #region Edit Modal -->
<ModalComponent @rendermode="InteractiveServer"
                TModel="ConditionViewmodel"
                Title="Edit Condition"
                OkButton="Apply Changes"
                OkButtonClass="btn btn-primary"
                CancelButton="Cancel"
                Model="@tempCondition"
                OnValidSubmit="@Update"
                @ref="EditModal">
    <div class="form-group">
        <label>Name</label>
        <InputText class="form-control" @bind-Value="tempCondition.Name" />
        <label>Icon</label>
        <div class="row">
            <div class="col-10">
                <InputFile OnChange="HandleSelected" class="form-control my-2" accept="image/*" />
            </div>
            <div class="col-2">
                <img src="@((UploadedPaths.Count>0) ? UploadedPaths[0] : tempCondition.Logo)" width="40" height="40" />
            </div>
        </div>

        <label>Description</label>
        <InputTextArea @bind-Value="tempCondition.Description" class="form-control my-2"></InputTextArea>
    </div>
</ModalComponent>
<!-- #endregion Edit Modal -->


<!-- #region Delete Modal -->
<ModalComponent @rendermode="InteractiveServer"
                TModel="ConditionViewmodel"
                Title="Delete Condition"
                OkButton="Yes, I am Sure"
                OkButtonClass="btn btn-danger"
                CancelButton="Cancel"
                Model="@EditCondition"
                OnValidSubmit="@Delete"
                @ref="DeleteModal">
    <h6 class="text-muted">Do you really want to Delete this Condition?</h6>
    <div class="container mb-2 px-0">
        <div class="row my-3">
            <div class="col-4">Name</div>
            <div class="col-8">@EditCondition.Name</div>
        </div>
        <div class="row my-3">
            <div class="col-4">Icon</div>
            <div class="col-8"><img src="@EditCondition.Logo" width="40" height="40" /></div>
        </div>
        <div class="row my-3">
            <div class="col-4">Description</div>
            <div class="col-8">
                <p style="max-width:400px;max-height:150px;overflow-y:auto">@EditCondition.Description</p>
            </div>
        </div>
    </div>
</ModalComponent>
<!-- #endregion Delete Modal -->

<!-- #region Image Modal -->
<ImageModalComponent @rendermode="InteractiveServer"
                     Title="Condition's Logo Image"
                     Image="@Image"
                     Model="EditCondition"
                     @ref="ImageModal">
</ImageModalComponent>
<!-- #endregion Image Modal -->


@code {
    public ConditionViewmodel EditCondition { get; set; } = new();
    private ModalComponent<ConditionViewmodel> EditModal;
    private ModalComponent<ConditionViewmodel> DeleteModal;
    public ImageModalComponent<ConditionViewmodel> ImageModal;
    public string? Image { get; set; } = string.Empty;
    public ResultViewmodel<ConditionViewmodel> Result { get; set; } = new();
    private ConditionViewmodel? tempCondition = new();
    
    void OpenEditModal(ConditionViewmodel condition)
    {
        //depth copy
        tempCondition = JsonSerializer.Deserialize<ConditionViewmodel>(
            JsonSerializer.Serialize(condition));

        UploadedPaths.Clear();
        EditModal.Show();
    }

    void OpenDeleteModal(ConditionViewmodel condition)
    {
        EditCondition = condition;
        DeleteModal.Show();
    }

    void OpenImageModal(ConditionViewmodel condition)
    {
        Image = condition.Logo;
        ImageModal?.Show();
    }

    private void Update(ConditionViewmodel condition)
    {
        if (UploadedPaths.Count > 0)
        {
            condition.Logo = UploadedPaths[0];
        }
        else
        {
            condition.Logo = "";
        }
        BaseDto<ConditionDto> result = ConditionService.Update(mapper.Map<ConditionDto>(condition));
        Result = mapper.Map<ResultViewmodel<ConditionViewmodel>>(result);
        if (Result.Success)
            ConditionsList = mapper.Map<List<ConditionViewmodel>>(ConditionService.GetList());
        AlertService.ShowAsync(Result.Message, Result.Status);

    }

    public List<ConditionViewmodel> ConditionsList { get; set; } = new();

    protected override void OnInitialized()
    {
        ConditionsList = mapper.Map<List<ConditionViewmodel>>(ConditionService.GetList());
    }


    List<string> UploadedPaths = new();

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        EditModal.SetIsAddBtnActive(false);
        UploadedPaths.Clear();
        var files = e.GetMultipleFiles();
        var paths = await Uploader.UploadAsync(files, Env.WebRootPath, "uploads/conditions");
        UploadedPaths.AddRange(paths);
        if (UploadedPaths.Count > 0)
        {
            EditModal.SetIsAddBtnActive(true);
        }
    }


    private void Delete(ConditionViewmodel condition)
    {
        var result = ConditionService.Delete(mapper.Map<ConditionDto>(condition));
        Result = mapper.Map<ResultViewmodel<ConditionViewmodel>>(result);
        if (Result.Success)
            ConditionsList = mapper.Map<List<ConditionViewmodel>>(ConditionService.GetList());
        AlertService.ShowAsync(Result.Message, Result.Status);
    }
}
