@page "/insurance/add"
@using Rehab.Application.Insurances
@using Rehab.EndPoint.AdminPanel.Viewmodels
@inject Rehab.Application.Insurances.IInsuranceService InsuranceService
@inject AutoMapper.IMapper mapper
@rendermode InteractiveServer
@inject AlertService AlertService
@inject IWebHostEnvironment Env
@inject IImageUploaderService Uploader

<div class="w-75 mx-auto p-4">
    <h3>Add Insurance</h3>

    <EditForm Model="Insurance" OnValidSubmit="Add" class="form-control" FormName="AddInsuranceForm">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary class="text-danger" />
        <label>Name</label>
        <InputText @bind-Value="Insurance.Name" class="form-control my-2"></InputText>
        <label>Logo</label>
        <InputFile OnChange="HandleSelected" class="form-control my-2" accept="image/*" />
        <label>Description</label>
        <InputTextArea @bind-Value="Insurance.Description" class="form-control my-2"></InputTextArea>
        @if (isAddBtnActive)
        {
            <button class="btn btn-primary my-2">Add</button>
        }
        else
        {
            <button class="btn btn-outline-danger my-2" disabled>Add</button>
        }
    </EditForm>
</div>


@code {
    public InsuranceViewmodel Insurance { get; set; } = new();
    public ResultViewmodel<InsuranceViewmodel> Result { get; set; } = new();
    private bool isAddBtnActive = true;

    private async Task Add()
    {
        if (Insurance is not null)
        {
            if(UploadedPaths.Count > 0)
            {
                Insurance.Logo = UploadedPaths[0];
            }
            else
            {
                Insurance.Logo = "";
            }

            var insuranceDto = mapper.Map<InsuranceDto>(Insurance);
            BaseDto<InsuranceDto> result = InsuranceService.Add(insuranceDto);
            Result = mapper.Map<ResultViewmodel<InsuranceViewmodel>>(result);
            if (Result.Success)
            {
                Insurance = new();
                UploadedPaths.Clear();
            }
            await AlertService.ShowAsync(Result.Message,Result.Status);
        }
    }

    List<string> UploadedPaths = new();

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        isAddBtnActive = false;
        StateHasChanged();
        var files = e.GetMultipleFiles();
        var paths = await Uploader.UploadAsync(files, Env.WebRootPath, "uploads/insurances");
        UploadedPaths.Clear();
        UploadedPaths.AddRange(paths);
        if (UploadedPaths.Count > 0)
        {
            isAddBtnActive = true;
        }
    }
}
